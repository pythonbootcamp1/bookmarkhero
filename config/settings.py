"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-f3k4=#b_e_*0(8t@a^ntq0+ts-t^b)*kq=)@$vs2kxs&i#%_9-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # DRF 추가
    'rest_framework',
    # 앱 추가
    'bookmarks',
    'rest_framework_simplejwt.token_blacklist',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
REST_FRAMEWORK = {
    # 페이지네이션: API가 한 번에 반환하는 데이터 개수 제한
    # 실무에서 필수! 데이터가 수천 개면 성능 이슈 발생
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    
    # 인증: 기본적으로 세션 인증 사용 (개발 단계)
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # JWT 인증을 기본으로 사용
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ],
    
    # 권한: 인증된 사용자만 API 사용 가능 ---> 지금은 주석을 해둡시다!!
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
}
ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
SIMPLE_JWT = {
    # Access Token 수명
    # 짧게 설정하여 보안 강화 (탈취되어도 금방 만료)
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    # 실무 권장: 15분~1시간
    # MVP 단계: 1시간 (개발 편의)

    # Refresh Token 수명
    # 길게 설정하여 사용자 편의 향상
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    # 실무 권장: 7일~30일

    # Token 자동 갱신 여부
    # True: Refresh 시 Refresh Token도 새로 발급
    # False: Refresh Token은 그대로 유지
    'ROTATE_REFRESH_TOKENS': True,
    # 권장: True (보안 강화)

    # 이전 Refresh Token 무효화 여부
    # ROTATE_REFRESH_TOKENS=True일 때만 의미 있음
    'BLACKLIST_AFTER_ROTATION': True,
    # 권장: True (이전 토큰 재사용 방지)

    # 서명 알고리즘
    'ALGORITHM': 'HS256',
    # HS256: 대칭키 암호화 (서버만 복호화 가능)
    # RS256: 비대칭키 (공개키로 검증 가능) - MSA 환경에 유리

    # 서명 키 (Django SECRET_KEY 사용)
    'SIGNING_KEY': SECRET_KEY,
    # 프로덕션: 별도의 JWT_SECRET_KEY 사용 권장

    # Payload에 포함할 사용자 식별 필드
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    # Token 헤더 이름
    'AUTH_HEADER_TYPES': ('Bearer',),
    # 요청 시: Authorization: Bearer <token>

    # Token 헤더 이름
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
